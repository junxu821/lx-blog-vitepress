import{_ as t,c as e,o as n,a5 as r}from"./chunks/framework.Baw4MH5z.js";const m=JSON.parse('{"title":"双飞翼和圣杯布局的区别","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/css/双飞翼和圣杯布局的区别.md","filePath":"frontend/css/双飞翼和圣杯布局的区别.md"}'),a={name:"frontend/css/双飞翼和圣杯布局的区别.md"},o=r('<h1 id="双飞翼和圣杯布局的区别" tabindex="-1">双飞翼和圣杯布局的区别 <a class="header-anchor" href="#双飞翼和圣杯布局的区别" aria-label="Permalink to &quot;双飞翼和圣杯布局的区别&quot;">​</a></h1><p><strong>相同点和不同点</strong></p><p>两者的功能相同，都是为了<em><strong>实现一个两侧宽度固定，中间宽度自适应的三栏布局，并且中间部分在HTML代码中要写在前边，这样它就会被优先加载渲染</strong></em>。</p><p>主要的不同之处就是在解决中间部分被挡住的问题时，采取的解决办法不一样。圣杯布局是在父元素上设置了padding-left和padding-right，在给左右两边的内容设置position为relative，通过左移和右移来使得左右两边的内容得以很好的展现，而双飞翼布局则是在中间这个div的外层又套了一个div来放置内容，在给这个中间的div设置margin-left和margin-right 。</p><p>两种布局方式都是把主列放在文档流最前面，使主列优先加载。</p><p>两种布局方式在实现上也有相同之处，都是让三列浮动，然后通过负外边距形成三列布局。</p><p>两种布局方式的不同之处在于如何处理中间主列的位置：</p><p><strong>圣杯布局</strong>是利用父容器的左、右内边距+两个列的相对定位;</p><p><strong>双飞翼布局</strong>是把主列嵌套在一个新的父级块中并利用主列的左、右外边距进行布局调整</p>',9),s=[o];function _(p,i,d,c,l,g){return n(),e("div",null,s)}const h=t(a,[["render",_]]);export{m as __pageData,h as default};
